ALGORITHM SumDistinctElements
VAR
     set1, set2 : ARRAY [0..9] OF INTEGER         // Input arrays
    n1, n2 : INTEGER                              // Actual number of elements in set1 and set2
    i, j : INTEGER                                // Loop counters
    sum : INTEGER ← 0                             // Final result: sum of distinct elements
    isDuplicate : BOOLEAN          
BEGIN
    // Initialisation
     // Step 1: Add elements from set1 that are NOT in set2
    FOR i ← 0 TO n1 - 1 DO
        isDuplicate ← FALSE

        // Check if set1[i] exists in set2
        FOR j ← 0 TO n2 - 1 DO
            IF set1[i] = set2[j] THEN
                isDuplicate ← TRUE
                BREAK
            ENDIF
        ENDFOR

        // If not found in set2, add to sum
        IF isDuplicate = FALSE THEN
            sum ← sum + set1[i]
        ENDIF
    ENDFOR

    // Step 2: Add elements from set2 that are NOT in set1
    FOR i ← 0 TO n2 - 1 DO
        isDuplicate ← FALSE

        // Check if set2[i] exists in set1
        FOR j ← 0 TO n1 - 1 DO
            IF set2[i] = set1[j] THEN
                isDuplicate ← TRUE
                BREAK
            ENDIF
        ENDFOR

        // If not found in set1, add to sum
        IF isDuplicate = FALSE THEN
            sum ← sum + set2[i]
        ENDIF
    ENDFOR

    // Output the final result
    WRITE("Sum of distinct elements: ", sum)
END

///////////////////////////
// Problem 2: Dot Product & Orthogonality
///////////////////////////

/*
  PROCEDURE: dot_product
  Calculates the dot product of two real-valued vectors v1 and v2 of size n.
  The result is stored in the variable ps (passed by reference).
*/
PROCEDURE dot_product(v1 : ARRAY OF REAL, v2 : ARRAY OF REAL, n : INTEGER, VAR ps : REAL)
VAR
    i : INTEGER
BEGIN
    // Initialisation

    ps ← 0  // Initialize dot product result

    // Loop through each component and accumulate the product
    FOR i ← 0 TO n - 1 DO
        ps ← ps + v1[i] * v2[i]
    ENDFOR
END


/*
  ALGORITHM: CheckOrthogonalVectors
  Reads multiple pairs of vectors and checks if each pair is orthogonal.
  Two vectors are orthogonal if their dot product is zero.
*/
ALGORITHM CheckOrthogonalVectors
VAR
    v1, v2 : ARRAY [0..9] OF REAL  // Vectors to compare
    ps : REAL                      // Dot product result
    n, i, j, size : INTEGER        // n = number of vector pairs, size = vector length
BEGIN
    // Read the number of vector pairs to process
    Read n

    // Loop through each pair of vectors
    FOR i ← 1 TO n DO
        // Read the size of the current vector pair
        Read size

        // Read elements of the first vector
        FOR j ← 0 TO size - 1 DO
            Read v1[j]
        ENDFOR

        // Read elements of the second vector
        FOR j ← 0 TO size - 1 DO
            Read v2[j]
        ENDFOR

        // Compute the dot product of v1 and v2
        dot_product(v1, v2, size, ps)

        // Check if the vectors are orthogonal
        IF ps = 0 THEN
            Write("Vector pair ", i, " is orthogonal.")
        ELSE
            Write("Vector pair ", i, " is NOT orthogonal.")
        ENDIF
    ENDFOR
END